
{% macro rel_move(indent=0) %}
{% filter indent(width=indent) %}
; ---- rel_move()
M400 ; wait for any pending moves to complete
G91
{{- caller() -}}
M400 ; wait for relative moves to complete
G90
; ---- rel_move() END
{%- endfilter %}
{% endmacro %}

{% macro drop_motor_current(percentage=0.6, motors=('X', 'Y'), indent=0) %}
{% filter indent(width=indent) %}
; ---- drop_motor_current()
M400 ; wait for any pending moves to complete
M913
{%- for letter in motors -%}
{{ ' {l}{p}'.format(l=letter, p=(percentage * 100) | round | int) }}
{%- endfor %} ; set the {{ motors }} current to {{ percentage }}

{{ caller() }}

M400 ; wait for moves to complete
M913
{%- for letter in motors -%}
{{ ' {l}{p}'.format(l=letter, p=100) }}
{%- endfor %} ; restore the {{ motors }} current

; ---- drop_motor_current() END
{%- endfilter %}
{% endmacro %}


{% macro avoid_tc_clash(indent=0) -%}
{% filter indent(width=indent) -%}
; ----- AVOID clashing with the TC walls
if move.axes[{{ py.g.axis.Y.index }}].homed && move.axes[{{ py.g.axis.Y.index }}].machinePosition > 140 ; if Y > ~184 (user position, somewhere in the TC docking area)
    G53 G0 Y140 F99999 ; slowly back out
{%- endfilter %}
{% endmacro %}


{% macro feedrate_changing_sequence(start_x, start_y, start_feed, end_x, end_y, end_feed, steps=10) -%}
{% for step_id in range(steps) -%}
{% set move_percentage = step_id / (steps - 1) -%}
{{
    caller({
        "X": start_x + move_percentage * (end_x - start_x),
        "Y": start_y + move_percentage * (end_y - start_y),
        "F": start_feed + move_percentage * (end_feed - start_feed),
    })
}}
{% endfor -%}
{% endmacro %}