; Sets 'out_var' to true if the currently active heater can extrude filament
{% macro is_hot_enough_to_extrude(out_var) %}

; ------ is_hot_enough_to_extrude({{out_var}})

set {{out_var}} = 0 ; set to 'False' by default

{% set cur_heater_tool_arr_idx = py.unique_var('cur_tool_heater_idx') -%}
{% set cur_nozzle_temp = py.unique_var('cur_nozzle_temp') -%}
{% set cur_heater_idx = py.unique_var('cur_heater_idx') -%}
{% set idx = py.unique_var('idx') -%}

var {{ cur_heater_tool_arr_idx }} = 0
var {{ cur_nozzle_temp }} = -273
var {{ cur_heater_idx }} = -1

if state.currentTool >= 0
    ; There is a tool mounter
    while var.{{ cur_heater_tool_arr_idx }} < #tools[state.currentTool].heaters
        set var.{{ cur_heater_idx }} = tools[state.currentTool].heaters[var.{{ cur_heater_tool_arr_idx }}]
        set var.{{ cur_nozzle_temp }} = max(var.{{ cur_nozzle_temp }}, heat.heaters[var.{{ cur_heater_idx }}].current)
        set var.{{ cur_heater_tool_arr_idx }} = var.{{ cur_heater_tool_arr_idx }} + 1


echo "T=" ^ state.currentTool ^ " H= "^ tools[state.currentTool].heaters ^" T =" ^ var.{{ cur_nozzle_temp }} ^ " H=" ^ heat.coldExtrudeTemperature
; Allow some cooldown (just in case)
set {{out_var}} = (var.{{ cur_nozzle_temp }} - 5) > heat.coldExtrudeTemperature ? 1 : 0

; ------ is_hot_enough_to_extrude() END

{% endmacro %}