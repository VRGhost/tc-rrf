; Sets 'out_var' to true if the currently active heater can extrude filament
{% macro iter_tool_heaters(tool_id) %}

{% set cur_heater_idx = py.unique_var('cur_heater_idx') -%}
{% set cur_heater_tool_arr_idx = py.unique_var('cur_tool_heater_idx') -%}

var {{ cur_heater_tool_arr_idx }} = 0
var {{ cur_heater_idx }} = -1

if {{ tool_id }} >= 0
    ; Valid tool ID
    while var.{{ cur_heater_tool_arr_idx }} < #tools[{{ tool_id }}].heaters
        set var.{{ cur_heater_idx }} = tools[{{ tool_id }}].heaters[var.{{ cur_heater_tool_arr_idx }}]
        {{ caller(
            heater='heat.heaters[var.{}]'.format(cur_heater_idx)
            ) | indent(8)
        }}
        set var.{{ cur_heater_tool_arr_idx }} = var.{{ cur_heater_tool_arr_idx }} + 1

{% endmacro %}

{% macro get_nozzle_temp(out_var, tool_id='state.currentTool') %}
; ------ get_nozzle_temp({{out_var}}, {{tool_id}})
set {{ out_var }} = -273
{% call(heater) iter_tool_heaters(tool_id) %}
set {{ out_var }} = max({{ out_var }}, {{ heater }}.current)
{% endcall %}
; ------ get_nozzle_temp() END
{% endmacro %}

{% macro is_hot_enough_to_extrude(out_var) %}

; ------ is_hot_enough_to_extrude({{out_var}})

set {{out_var}} = 0 ; set to 'False' by default

{% set cur_nozzle_temp = py.unique_var('cur_nozzle_temp') -%}
{% set idx = py.unique_var('idx') -%}
var {{ cur_nozzle_temp }} = -273
; echo "Current tool: " ^ state.currentTool
{{ get_nozzle_temp('var.' + cur_nozzle_temp, 'state.currentTool') }}

; echo "Tool temp: " ^ var.{{ cur_nozzle_temp }}
; Allow some cooldown (just in case)
set {{out_var}} = (var.{{ cur_nozzle_temp }} - 5) > heat.coldExtrudeTemperature ? 1 : 0

; ------ is_hot_enough_to_extrude() END

{% endmacro %}

{% macro get_target_tool_temp(out_var, tool_id='state.currentTool') %}
set {{ out_var }} = -273
; ------ get_target_tool_temp({{out_var}}, {{tool_id}})
{% call(heater) iter_tool_heaters(tool_id) %}
if {{ heater }}.state == "active"
    set {{ out_var }} = max({{out_var}}, {{ heater }}.active)
if {{ heater }}.state == "standby"
    set {{ out_var }} = max({{out_var}}, {{ heater }}.standby)
{% endcall %}
; ------ get_target_tool_temp() END

{% endmacro %}